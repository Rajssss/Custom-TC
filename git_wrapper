#bin/bash
# Global Function Depth
export FDEPTH=2
# Automation Methods Begin

git_rebase(){
if [[ -z "$1" ]] && [[ -z "$2" ]] && [[ -z "$3" ]]
then
	printf "\nFunction requires the Branch, Remote & Remote's branch you want to Rebase on\n"
	return
else
	export L=$1
	export R=$2
	export RB=$3
	ssh-add
	find .  -maxdepth $FDEPTH -type d -name .git -execdir bash -c 'git fetch $R && git checkout $B && git rebase $R/$RB' ';'
	ssh-add -d
	printf "\nDone\n"
	unset L R RB
	return
fi
}

git_update(){
if [[ -z "$1" ]] && [[ -z "$2" ]] && [[ -z "$3" ]]
then
	printf "\nFunction requires the Branch you want to Sync, the Remote & Remote branch\n"
	return
else
	export L=$1
	export R=$2
	export RB=$3
	ssh-add
	find .  -maxdepth $FDEPTH -type d -name .git -execdir bash -c 'git fetch $R && git checkout $R/$RB && git checkout -B $L' ';'
	ssh-add -d
	printf "\nDone\n"
	unset L R RB
	return
fi
}

git_push(){
if [[ -z "$1" ]] && [[ -z "$2" ]]
then
	printf "\nFunction requires the Remote & Branch\n"
	return
else
	export B=$1
	export R=$2
	ssh-add
	printf "\nChecking Out $B\n"
	find .  -maxdepth $FDEPTH -type d -name .git -execdir bash -c 'git push -fu $R $B' ';'
	ssh-add -d
	printf "\nDone\n"
	unset B R
	return
fi
}

git_checkout(){
if [[ -z "$1" ]]
then
	printf "\nFunction requires the Branch\n"
	return
else
	export B=$1
	printf "\nChecking Out $B\n"
	find .  -maxdepth $FDEPTH -type d -name .git -execdir bash -c 'git checkout $B' ';'
	printf "\nDone\n"
	unset B
	return
fi
}

git_forall(){
if [[ -z "$2" && -z "$1" ]]
then
	printf "\nNo Command Specified or Command not Enclosed in Quotes\n"
	return
elif [[ -z "$2" ]]
then
	export C=$1
	find .  -maxdepth $FDEPTH -type d -name .git -execdir bash -c '$C' ';'
	printf "\nDone\n"
	unset C
	return
else
	printf "\nNo Command Specified or Command not Enclosed in Quotes\n"
	return
fi
}

# Manifest Creater Methods
# Start
init_manifest(){
cd $PWD
rm -f manifest_autogen.xml
echo -n '<?xml version="1.0" encoding="UTF-8"?>' > manifest_autogen.xml
echo '' >> manifest_autogen.xml
echo "<manifest>" >> manifest_autogen.xml
echo '' >> manifest_autogen.xml
echo '<remote name="github_gen" fetch="https://github.com/" />' >> manifest_autogen.xml
echo '' >> manifest_autogen.xml
}

add_repo(){
export URL=$(git remote get-url origin)
if [[ "$(echo $URL | grep -c "https://github.com/")" == "1" ]]
then
	export S="$(echo $URL | grep -o "https://github.com/.*" | cut -f4 -d/)""/""$(echo $URL | grep -o "https://github.com/.*" | cut -f5 -d/)"
elif [[ "$(echo $URL | grep -c "ssh://git@github.com:")" == "1" ]]
then
	export S="$(echo $URL | grep -o "ssh://git@github.com:.*" | cut -f3 -d:)"
else
	export S="$(echo $URL | grep -o "git@github.com:.*" | cut -f2 -d:)"
fi
echo -e "<project path=\"$(basename "$PWD")\" name=\"$S\" remote=\"github_gen\" revision=\"$(git branch --points-at HEAD | cut -d ' ' -f2)\" />" >> ../manifest_autogen.xml
unset S URL
}
export -f add_repo
# End

git_manifesto(){
init_manifest
find .  -maxdepth 2 -type d -name .git -execdir bash -c "add_repo" ';'
printf "\n ##### Warning: This Program is only Meant to Create a Manifest #####\n ##### Give it Some Love Afterwards ##### \n\n"
echo '' >> manifest_autogen.xml
echo "</manifest>" >> manifest_autogen.xml
}

# Automation Methods End

# Help

wrapper_help(){
printf "\n#### Command List With Syntax ####\nAll Commands affect Repos in Current Directory\n"
printf "\n>  git_rebase:"
printf "\nFunction requires the Branch, Remote & Remote's branch you want to Rebase on\n"
printf "\n>  git_update:"
printf "\nFunction requires the Branch you want to Sync, the Remote & Remote branch\n"
printf "\n>  git_push:"
printf "\nFunction requires the Remote & Branch\n"
printf "\n>  git_checkout:"
printf "\nFunction requires the Branch\n"
printf "\n>  git_forall:\n"
printf "Function requires a Command to Execute on Repositories\n"
printf "\n>  git_manifesto:\n"
printf "Creates a Github Manifest for Repos in Current Directory\n\n"
}